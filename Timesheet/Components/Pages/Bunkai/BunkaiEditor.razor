@implements IDialogContentComponent<Bunkai>
@using Timesheet.Services
@using Timesheet.Entities

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField @bind-Value=Content.KataName Label="Kata Name" style="width: 100%;"></FluentTextField>

        <FluentTabs ActiveTabId="markdown" style="width: 100%;">
            <FluentTab Label="Markdown" Id="markdown">
                <FluentTextArea @bind-Value=Content.Description Label="Description" style="width: 100%;" Resize="TextAreaResize.Vertical" Rows="10"></FluentTextArea>
            </FluentTab>
            <FluentTab Label="Preview" Id="preview">
                <FluentCard style="width: 100%;">
                    @Preview
                </FluentCard>
            </FluentTab>
            <FluentTab Label="Images" Id="images">
                <FluentCard style="width: 100%;">
                    <ul>
                        @foreach(var image in Images)
                        {
                            <li>
                                <a href="api/files/@image" target="_blank">@image</a>
                            </li>
                        }
                    </ul>
                </FluentCard>
            </FluentTab>
        </FluentTabs>        
               
    </FluentStack>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!CanSave)"
                  OnClick="@Save">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@Cancel">
        Cancel
    </FluentButton>
</FluentDialogFooter>



@code {
    [Inject]
    public BunkaiService BunkaiService { get; set; }

    [Inject]
    public BlobService BlobService { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    [Parameter]
    public Bunkai? Content { get; set; } = default!;

    private bool CanSave => Content?.KataName != null;

    private MarkupString Preview => (MarkupString)Markdig.Markdown.ToHtml(Content.Description ?? "");

    private List<string> Images = new List<string>();

    // protected override void OnParametersSet()
    // {
    //     if(Content == null)
    //     {
    //         Content = new Bunkai();
    //     }


    // }

    protected override async Task OnParametersSetAsync()
    {
        if (Content == null)
        {
            Content = new Bunkai();
        }

        await GetImageList();
    }

    private async Task Save()
    {
        if(Content != null)
        {
            await BunkaiService.CreateOrUpdateBunkai(Content);
        }

        await Dialog.CloseAsync();
    }

    private async Task Cancel()
    {
        await Dialog.CancelAsync();
    }

    private async Task GetImageList()
    {
        Images = await BlobService.ListFiles();
    }
}
