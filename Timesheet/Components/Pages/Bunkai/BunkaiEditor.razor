@implements IDialogContentComponent<Bunkai>
@using Timesheet.Services
@using Timesheet.Entities

<!-- Header -->
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<!-- Body -->
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField @bind-Value=Content.KataName Label="Kata Name"></FluentTextField>

        <FluentTextArea @bind-Value=Content.Description Label="Description"></FluentTextArea>
    </FluentStack>
</FluentDialogBody>

<!-- Footer -->
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!CanSave)"
                  OnClick="@Save">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@Cancel">
        Cancel
    </FluentButton>
</FluentDialogFooter>



@code {
    [Inject]
    public BunkaiService BunkaiService { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    [Parameter]
    public Bunkai? Content { get; set; } = default!;

    private bool CanSave => Content?.KataName != null;

    protected override void OnParametersSet()
    {
        if(Content == null)
        {
            Content = new Bunkai();
        }
    }

    private async Task Save()
    {
        if(Content != null)
        {
            await BunkaiService.CreateOrUpdate(Content);
        }

        await Dialog.CloseAsync();
    }

    private async Task Cancel()
    {
        await Dialog.CancelAsync();
    }
}
