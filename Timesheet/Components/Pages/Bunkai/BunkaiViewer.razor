@page "/bunkai/{kataName}"

@using Timesheet.Common
@using Timesheet.Services
@using Timesheet.Entities

@rendermode InteractiveServer
<FluentBreadcrumb>
    <FluentBreadcrumbItem Href="bunkai">
        Bunkai
    </FluentBreadcrumbItem>
    <FluentBreadcrumbItem Href="@($"bunkai/{KataName}")">
        @KataName
    </FluentBreadcrumbItem>
</FluentBreadcrumb>

<FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Bottom" >
    <FluentLabel Typo="Typography.PageTitle">Bunkai Viewer</FluentLabel>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End" VerticalAlignment="VerticalAlignment.Bottom">
        <AuthorizeView Roles="bunkai-editor">
            <Authorized>
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" Title="Edit" OnClick="@OnEditBunkai" Disabled="@(!CanEdit)" />
            </Authorized>
        </AuthorizeView>
        
        <FluentButton IconEnd="@(new Icons.Regular.Size16.DocumentPdf())" Title="Pdf" OnClick="@ExportToPdf" Disabled="@(!CanEdit)" />
    </FluentStack>    
</FluentStack>


@if(Bunkai == null)
{
    <FluentLabel>Bunkai not found.</FluentLabel>
}
else
{
    @BunkaiMarkup
}

@code {
    [Inject]
    IDialogService DialogService { get; set; }

    [Inject]
    public BunkaiService BunkaiService { get; set; }

    [Inject]
    public PdfRendererService PdfRendererService { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; }

    [Parameter]
    public string KataName { get; set; }

    private Bunkai? Bunkai = null;

    private MarkupString BunkaiMarkup;

    private bool CanEdit => Bunkai != null;

    protected override async Task OnParametersSetAsync()
    {
        await LoadBunkai();
    }

    private async Task LoadBunkai()
    {
        Bunkai = await BunkaiService.GetByKataName(KataName);

        var html = Markdig.Markdown.ToHtml(Bunkai.Description ?? "");
        BunkaiMarkup = (MarkupString)html;
    }

    private async Task ExportToPdf()
    {
        var html = Markdig.Markdown.ToHtml(Bunkai.Description ?? "");
        var filename = $"{Bunkai.KataName}.pdf";

        var stream = await PdfRendererService.RenderPdfFromHtml(html);

        using var streamRef = new DotNetStreamReference(stream: stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }

    private async Task OnEditBunkai()
    {
        DialogParameters parameters = new()
            {
                Title = $"Edit Bunkai",
                PrimaryAction = "Save",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel",
                Width = "80%",
                Height = "70%",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<BunkaiEditor>(Bunkai, parameters);
        DialogResult? result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadBunkai();
        }
    }
}
