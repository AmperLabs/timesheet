@page "/bunkai"
@using Timesheet.Services
@using Timesheet.Entities

@rendermode InteractiveServer

<FluentBreadcrumb>
    <FluentBreadcrumbItem Href="bunkai">
        Bunkai
    </FluentBreadcrumbItem>
</FluentBreadcrumb>


<FluentDataGrid Items="@BunkaiList"
                TGridItem="Bunkai"
                HeaderCellAsButtonWithMenu="true"
                Pagination="@Pagination" >
    <TemplateColumn Title="Kata" Sortable="true" SortBy="@KataNameSort">
            <a href="bunkai/view/@context.KataName">@context.KataName</a>
        </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@Pagination" />

<FluentDataGrid Items="@KataList"
                TGridItem="Kata"
                HeaderCellAsButtonWithMenu="true" >
    <PropertyColumn Title="Kata" Property="@(c => c.Name)" Sortable="true" />
</FluentDataGrid>

<AuthorizeView Roles="bunkai-editor">
    <Authorized>
        <FluentButton OnClick="OnAddKata">Add Kata</FluentButton>
        <FluentButton OnClick="OnAddBunkai">Add Bunkai</FluentButton>
    </Authorized>
</AuthorizeView>

@code {
    [Inject]
    IDialogService DialogService { get; set; }

    [Inject]
    public BunkaiService BunkaiService { get; set; }

    private IQueryable<Bunkai>? BunkaiList = null;

    private IQueryable<Kata>? KataList = null;

    private PaginationState Pagination = new PaginationState { ItemsPerPage = 10 };

    private GridSort<Bunkai> KataNameSort = GridSort<Bunkai>
        .ByAscending(x => x.KataName);

    protected override async Task OnParametersSetAsync()
    {
        await LoadBunkaiList();
    }

    private async Task LoadBunkaiList()
    {
        BunkaiList = (await BunkaiService.GetBunkais()).AsQueryable();
    }

    private async Task OnAddBunkai()
    {
        DialogParameters parameters = new()
        {
            Title = $"Add new Bunkai",
            PrimaryAction = "Save",
            PrimaryActionEnabled = false,
            SecondaryAction = "Cancel",
            Width = "80%",
            Height = "70%",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<BunkaiEditor>(null, parameters);
        DialogResult? result = await dialog.Result;

        if(!result.Cancelled)
        {
            await LoadBunkaiList();
        }
    }

    private async Task LoadKataList()
    {
        KataList = (await BunkaiService.GetKatas()).AsQueryable();
    }
        
    private async Task OnAddKata()
    {
        var kataName = string.Empty;
        var dialogInstance = await DialogService.ShowDialogAsync(@<div>
        <FluentTextField @bind-Value=kataName Label="Enter Kata Name:" />
    </div>
    , new DialogParameters
    {
        Title = "Add Kata",
    });

        var result = await dialogInstance.Result;
        if (!result.Cancelled)
        {
            await BunkaiService.CreateOrUpdateKata(new Kata
            {
                Name = kataName
            });

            await LoadKataList();
        }
    }
}
