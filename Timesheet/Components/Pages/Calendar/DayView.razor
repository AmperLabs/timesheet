@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using System.Globalization
@using Timesheet.Common
@using Timesheet.Data
@using Timesheet.Services
@inject CalendarService CalendarService

@rendermode InteractiveServer

@if(_day != null)
{
    <table style="@TableStyle">
        <tr>
            <td><FluentLabel>Datum</FluentLabel></td>
            <td>
                @if(IsToday)
                {
                    <FluentLabel Weight="FontWeight.Bold" Color="Color.Accent">@_formattedDate</FluentLabel>
                }
                else
                {
                    <FluentLabel>@_formattedDate</FluentLabel>
                }            
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Anwesenheit</FluentLabel></td>
            <td>
                <FluentSelect TOption="PresenceType"
                              Items="@PresenceTypes"
                              OptionValue="@(p => p.GetDisplayName())"
                              OptionText="@(p => GetPresenceCaption(p))"
                              @bind-SelectedOption="@(_day.PresenceType)"
                              Style="width: 100%;"/>
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Kommen</FluentLabel></td>
            <td><FluentTimePicker Placeholder="Kommen" Value="@_day.StartOfWork.ToDateTimeNullable()" ValueChanged="@(e => _day.StartOfWork = e.ToTimeOnlyNullable())" Disabled="@(!_day.IsPresenceWorkAllowed)" Style="width: 100%;" /></td>
        </tr>
        <tr>
            <td><FluentLabel>Gehen</FluentLabel></td>
            <td><FluentTimePicker Placeholder="Gehen" Value="@_day.EndOfWork.ToDateTimeNullable()" ValueChanged="@(e => _day.EndOfWork = e.ToTimeOnlyNullable())" Disabled="@(!_day.IsPresenceWorkAllowed)" Style="width: 100%;" /></td>
        </tr>
        <tr>
            <td><FluentLabel>Ant. Mobil</FluentLabel></td>
            <td><TimeSpanInput @bind-Duration=_day.PartlyMobileWork Disabled="@(!_day.IsMobileWorkAllowed)" Style="width: 100%;" /></td>
        </tr>
        <tr>
            <td><FluentLabel>Kommentar</FluentLabel></td>
            <td><FluentTextField @bind-Value=_day.Comment Style="width: 100%;" /></td>
        </tr>
        <tr>
            <td><FluentLabel>Brutto AZ</FluentLabel></td>
            <td>
                <DurationDisplay Duration="_day.GrossWorkingTimeInPresence" ReadOnly="true" Style="width: 100%;" />
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Pausen</FluentLabel></td>
            <td>
                <DurationDisplay Duration="_day.BreakTime" ReadOnly="true" Style="width: 100%;" />
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Netto AZ</FluentLabel></td>
            <td>
                <DurationDisplay Duration="_day.NetWorkingTimeInPresence" ReadOnly="true" Style="width: 100%;" />
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Gesamt</FluentLabel></td>
            <td>
                <DurationDisplay Duration="_day.TotalWorkingTime" ReadOnly="true" Style="width: 100%;" />
                @if(_day.IsMaximumDialyWorkingTimeExceeded.HasValue && _day.IsMaximumDialyWorkingTimeExceeded.Value)
                {
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size20.ErrorCircle())" Color="@Color.Error" Title="Maximal Arbeitszeit überschritten" />
                }
            </td>
        </tr>
        <tr>
            <td><FluentLabel>Überstunden</FluentLabel></td>
            <td>
                <DurationDisplay Duration="_day.OvertimeHours" ReadOnly="true" Style="width: 100%;" />
            </td>
        </tr>
        <tr>
            <td></td>
            <td><FluentButton OnClick="@Save" Disabled="@(!_day.IsDirty)" Style="width: 100%;" >Save</FluentButton></td>
        </tr>
    </table>
}
else
{
    <div style="width: 300px;display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgressRing></FluentProgressRing>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public bool ShowCaptions { get; set; } = false;

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private CultureInfo _culture = new CultureInfo("de-DE");

    private string _currentUserId { get; set; }

    private TimesheetDay _day;

    private string? _formattedDate => $"{_day.Date.DayOfWeek.GetDayName(_culture)}, {_day.Date.ToString("d", _culture)}";

    private bool IsToday => Date.IsSameDay(DateTime.Today);

    private string TableStyle => IsToday ? "border: 1px solid var(--accent-fill-rest);" : "border: none";

    private List<PresenceType> PresenceTypes = Enum.GetValues<PresenceType>().ToList();

    private string GetPresenceCaption(PresenceType presence)
    {
        switch(presence)
        {
            case PresenceType.PresenceOnly:
                return "Nur vor Ort";
            case PresenceType.MobilePartly:
                return "Anteilig Mobil";
            case PresenceType.MobileOnly:
                return "Nur Mobil";
            case PresenceType.Vacation:
                return "Urlaub";
            case PresenceType.PublicHoliday:
                return "Feiertag";
            case PresenceType.Illness:
                return "Krank";
            default:
                return "";
        }
    }

    private async Task Save()
    {
        if(_day != null)
        {
            await CalendarService.CreateOrUpdateTimesheetDay(_day, _currentUserId);
            _day.ResetDirtyFlag();

            if(ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            _currentUserId = state.GetEmailForAuthenticatedUser();
        }

        var booking = await CalendarService.GetTimesheetDayByDate(Date, _currentUserId);

        if(booking != null)
        {
            booking.ResetDirtyFlag();
            _day = booking;
        }
        else
        {
            _day = TimesheetDay.FromDateTime(Date);
        }
    }
}
