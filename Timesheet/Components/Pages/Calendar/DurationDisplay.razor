@using System.Text.RegularExpressions
@using Timesheet.Common
<FluentTextField
    TextFieldType="TextFieldType.Text"
    ValueChanged="@ValueChanged"
    Value="@Value"
    ReadOnly="@ReadOnly"
    Disabled="@Disabled"
    Appearance="@Appearance"
    Placeholder="@Placeholder"
    Pattern="@timePattern"
    Style="width: 100%;" >

    @if(Icon != null)
    {
        <FluentIcon Value="@(Icon)" Color="@IconColor" Slot="end" />
    }
    
</FluentTextField>

@code {
    [Parameter]
    public TimeSpan? Duration { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public EventCallback<TimeSpan?> DurationChanged { get; set; }

    [Parameter]
    public Icon? Icon { get; set; }

    [Parameter]
    public Color? IconColor { get; set; }

    private string? Placeholder => ReadOnly ? null : "HH:mm";

    private FluentInputAppearance Appearance => ReadOnly ? FluentInputAppearance.Filled : FluentInputAppearance.Outline;

    private string? Value
    {
        get
        {
            var value = Duration.HasValue ?
                Duration.Value.ToLongHoursString() :
                null;

            return value;
        }
    }

    private string timePattern = @"([\-]?\d+):([0-5][0-9])";

    private async Task ValueChanged(string value)
    {
        var match = Regex.Match(value, timePattern);

        if (match.Success)
        {
            var totalHours = int.Parse(match.Groups[1].Value);
            var minutes = int.Parse(match.Groups[2].Value);

            var days = (int)Math.Floor(totalHours / 24d);
            var hours = (int)totalHours - days * 24;

            Duration = new TimeSpan(days, hours, minutes, 0);
        }
        else
        {
            Duration = null;            
        }   

        await DurationChanged.InvokeAsync(Duration);
    }
}
