@page "/calendar"
@using System.Globalization
@using Timesheet.Common
@using Timesheet.Data
@using Timesheet.Services

@rendermode InteractiveServer

<PageTitle>Calendar</PageTitle>

<AuthorizeView>
    <Authorized>
        <FluentGrid>
            <FluentGridItem sm="12" md="6" lg="4" xl="3">
                <FluentCard>
                    <CardHeader Title="Kalender" />

                    <FluentCalendar ValueChanged="@SelectedDateChanged" PickerMonthChanged="@PickerMonthChanged" Value="@SelectedDay" DisabledDateFunc="@DisabledDay" Culture="@_culture">
                        <DaysTemplate Context="dayContext">
                            @if (!dayContext.IsInactive && HasBooking(dayContext.Date))
                            {
                                <div style="font-weight: bold; background-color: @(GetColorForPresenceType(GetBooking(dayContext.Date).PresenceType));">
                                    @dayContext.DayNumber
                                </div>
                            }
                            else
                            {
                                @dayContext.DayNumber
                            }
                        </DaysTemplate>
                    </FluentCalendar>

                    <FluentStack Orientation="Orientation.Vertical">                        
                        <LegendItem Caption="Nur vor Ort" Color="@GetColorForPresenceType(PresenceType.PresenceOnly)" />
                        <LegendItem Caption="Anteilig Mobil" Color="@GetColorForPresenceType(PresenceType.MobilePartly)" />
                        <LegendItem Caption="Nur Mobil" Color="@GetColorForPresenceType(PresenceType.MobileOnly)" />
                        <LegendItem Caption="Feiertag" Color="@GetColorForPresenceType(PresenceType.PublicHoliday)" />
                        <LegendItem Caption="Urlaub" Color="@GetColorForPresenceType(PresenceType.Vacation)" />
                        <LegendItem Caption="Krank" Color="@GetColorForPresenceType(PresenceType.Illness)" />
                    </FluentStack>

                </FluentCard>
            </FluentGridItem>
            
            <FluentGridItem sm="12" md="6" lg="4" xl="3">
                <FluentCard AreaRestricted="true">
                    <CardHeader Title="Tagesdetails" />
                    
                    @if (SelectedDay != null)
                    {
                        @* <WeekView Year="@SelectedDay.Value.Year" Date="@SelectedDay" /> *@
                        <DayView Date="@SelectedDay.Value" ShowCaptions="true" ValueChanged="OnDayValueChanged" />
                    }
                </FluentCard>
            </FluentGridItem>
        
            <FluentGridItem sm="12" md="6" lg="4" xl="3">
                <FluentCard>
                    <CardHeader Title="Wochendetails" />
                    @if (SelectedDay != null)
                    {
                        <WeekView Date="@SelectedDay" />
                    }
                </FluentCard>
            </FluentGridItem>
        </FluentGrid>
    </Authorized>
    <NotAuthorized>
        <FluentLabel>You are not authorized to access the calendar.</FluentLabel>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Inject]
    public CalendarService CalendarService { get; set; }

    private CultureInfo _culture = new CultureInfo("de-DE");

    private DateTime? _selectedDay;
    private DateTime? SelectedDay
    {
        get
        {
            return _selectedDay;
        }
        set
        {
            if(value.HasValue)
            {
                _selectedDay = value.Value.DayOfWeek switch
                {
                    DayOfWeek.Saturday => value.Value.AddDays(-1),
                    DayOfWeek.Sunday => value.Value.AddDays(-2),
                    _ => value.Value
                };
            }
        }
    }

    private List<TimesheetDay> BookingsInSelectedMonth = new List<TimesheetDay>();

    private bool DisabledDay(DateTime date) => date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;

    private string _currentUserId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            _currentUserId = state.GetEmailForAuthenticatedUser();
        }

        SelectedDay = DateTime.Today;
        await SelectedDateChanged(SelectedDay);
    }

    private async Task SelectedDateChanged(DateTime? date)
    {
        SelectedDay = date;

        await LoadBookingsCurrentInMonth();
    }

    private async Task PickerMonthChanged(DateTime date)
    {
        SelectedDay = date;

        await LoadBookingsCurrentInMonth();
    }

    private async Task LoadBookingsCurrentInMonth()
    {
        if (SelectedDay.HasValue)
        {
            var firstDay = new DateTime(SelectedDay.Value.Year, SelectedDay.Value.Month, 1);
            var lastDay = firstDay.AddMonths(1).AddDays(-1);

            BookingsInSelectedMonth = await CalendarService.GetTimesheetDaysByDateRange(firstDay, lastDay, _currentUserId);
        }
    }

    private async Task OnDayValueChanged()
    {
        await LoadBookingsCurrentInMonth();
    }

    private bool HasBooking(DateTime date)
    {
        return BookingsInSelectedMonth
            .Where(x => x.Date == DateOnly.FromDateTime(date))
            .Any();
    }

    private TimesheetDay? GetBooking(DateTime date)
    {
        return BookingsInSelectedMonth
            .Where(x => x.Date == DateOnly.FromDateTime(date))
            .FirstOrDefault();
    }

    private string GetColorForPresenceType(PresenceType presence)
    {
        // https://htmlcolorcodes.com/color-chart/

        return presence switch
        {
            PresenceType.PresenceOnly => "#8bc34a",
            PresenceType.MobilePartly => " #4db6ac",
            PresenceType.MobileOnly => "#00bcd4",
            PresenceType.Vacation => " #fff59d",
            PresenceType.PublicHoliday => " #90a4ae",
            PresenceType.Illness => "#f44336",
            _ => " #e1bee7"
        };
    }
}
