@using Timesheet.Common
@using Timesheet.Data
@using Timesheet.Services
@rendermode InteractiveServer

@inject CalendarService CalendarService

@if(_week != null)
{
    <table>
        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Kalenderwoche</FluentLabel></td>
            <td colspan="2"><FluentLabel Typo="Typography.Body" Weight="FontWeight.Normal">@($"{_year}-{_weekNumber}")</FluentLabel></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Gesamte Arbeitszeit</FluentLabel></td>
            <td colspan="2"><DurationDisplay Duration="@_week.TotalWorkingTime" ReadOnly="true" Style="width: 100%;" /></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Vor Ort</FluentLabel></td>
            <td><DurationDisplay Duration="@_week.TotalWorkingTimeInPresence" ReadOnly="true" Style="width: 100%;" /></td>
            <td><FluentTextField ReadOnly="true" Appearance="FluentInputAppearance.Filled" Value="@($"{Math.Round(_week.PresenceWorkShare * 100 ?? 0, 1)} %")" ></FluentTextField></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Mobilarbeit</FluentLabel></td>
            <td><DurationDisplay Duration="@_week.TotalMobileWork" ReadOnly="true" Style="width: 100%;" /></td>
            <td><FluentTextField ReadOnly="true" Appearance="FluentInputAppearance.Filled" Value="@($"{Math.Round(_week.MobileWorkShare * 100 ?? 0, 1)} %")"></FluentTextField></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Ganztägige Mobilarbeit</FluentLabel></td>
            <td colspan="2"><DurationDisplay Duration="@_week.TotalFullyMobileWork" ReadOnly="true" Style="width: 100%;" /></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Anteilige Mobilarbeit</FluentLabel></td>
            <td colspan="2"><DurationDisplay Duration="@_week.TotalPartlyMobileWork" ReadOnly="true" Style="width: 100%;" /></td>
        </tr>


        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Gebuchte Mobilarbeit</FluentLabel></td>
            <td colspan="2"><TimeSpanInput @bind-Duration=_week.BookedMobileWork Style="width: 100%;" /></td>
        </tr>

        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Ungebuchte Mobilarbeit</FluentLabel></td>
            <td colspan="2"><DurationDisplay Duration="@_week.UnbookedMobileWork" ReadOnly="true" Style="width: 100%;" /></td>
        </tr>

        
        <tr>
            <td><FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">Überstunden</FluentLabel></td>
            <td colspan="2"><DurationDisplay Duration="@_week.OvertimeHours" ReadOnly="true" Style="width: 100%;" /></td>
        </tr>

        <tr>
            <td></td>
            <td colspan="2"><FluentButton OnClick="@Save" Disabled="@(!_week.IsDirty)" Style="width: 100%;">Save</FluentButton></td>
        </tr>
    </table>
}
else
{
    <div style="width: 300px;display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgressRing></FluentProgressRing>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public DateTime? Date { get; set; }

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private string _currentUserId { get; set; }

    private int _year;
    private int _weekNumber;
    private TimesheetWeek? _week;

    protected override async Task OnParametersSetAsync()
    {
        if (Date.HasValue)
        {
            _year = Date.Value.Year;
            _weekNumber = CalendarService.GetCalendarWeekForDate(Date.Value);
        }

        if (authenticationState is not null)
        {
            var state = await authenticationState;
            _currentUserId = state.GetEmailForAuthenticatedUser();
        }

        await LoadWeek();
    }

    private async Task LoadWeek()
    {
        var week = await CalendarService.GetTimesheetWeek(_year, _weekNumber, _currentUserId);

        if (week != null)
        {
            week.ResetDirtyFlag();
            _week = week;
        }
        else
        {
            _week = TimesheetWeek.FromCalendarWeek(_year, _weekNumber);
        }
    }

    private async Task Save()
    {
        if (_week != null)
        {
            await CalendarService.CreateOrUpdateTimesheetWeek(_week, _currentUserId);
            _week.ResetDirtyFlag();

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync();
            }
        }
    }
}
